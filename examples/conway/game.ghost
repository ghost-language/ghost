import * from 'utilities'

class Game {
    resolution := 10
    gridSize := 12
    cols := 0
    rows := 0
    grid := []
    generation := 0

    function constructor() {
        random.seed()

        this.cols := 800 / this.resolution
        this.rows := 600 / this.resolution

        console.log("cols: %s".format(this.cols))
        console.log("rows: %s".format(this.rows))

        console.log("Generating world...")
        this.grid := this.generateGrid()

        console.log("Spawning life...")
        this.grid := this.spawnLife(this.grid)
    }

    function update() {
        if (keyboard.wasPressed(key.space)) {
            console.log("Generating world...")
            this.grid := this.generateGrid()

            console.log("Spawning life...")
            this.grid := this.spawnLife(this.grid)

            this.generation := 0
        }

        if (this.generation >= 200) {
            console.log("Generating world...")
            this.grid := this.generateGrid()

            console.log("Spawning life...")
            this.grid := this.spawnLife(this.grid)

            this.generation := 0
        }
    }

    function draw() {
        draw.begin()

        draw.clearBackground()

        text.draw("FPS: %s".format(window.FPS), 10, 10, 20)
        text.draw("Generation: %s".format(this.generation), 10, 30, 20)

        rows := 0 .. this.rows
        cols := 0 .. this.cols

        for (i in cols) {
            for (j in rows) {
                x := i * this.gridSize
                y := j * this.gridSize

                if (this.grid[i][j] == 1) {
                    draw.rectangle(x, y, this.resolution, this.resolution)
                }
            }
        }

        next := this.generateGrid()
        next := this.spawnLife(next)

        for (i in cols) {
            for (j in rows) {
                status := this.grid[i][j]

                sum := 0
                neighbors := this.countNeighbors(i, j)

                // Rule 2
                next[i][j] := status

                // Rule 0
                if (status == 0 and neighbors == 3) {
                    next[i][j] := 1
                }

                // Rule 1
                if (status == 1 and (neighbors < 2 or neighbors > 3)) {
                    next[i][j] := 0
                }
            }
        }

        this.grid := next
        this.generation := this.generation + 1

        draw.end()
    }

    function generateGrid() {
        grid := []
        rows := 0..this.rows
        cols := 0..this.cols

        for (i in cols) {
            grid[i] := rows
        }

        return grid
    }

    function spawnLife(grid) {
        rows := 0..this.rows
        cols := 0..this.cols

        for (i in cols) {
            row := []

            for (j in rows) {
                row[j] := random.range(1).round()
            }

            grid[i] := row
        }

        return grid
    }

    function countNeighbors(x, y) {
        sum := 0

        for (i := -1; i < 2; i := i + 1) {
            for (j := -1; j < 2; j := j + 1) {
                col := (x + i + this.cols) % this.cols
                row := (y + j + this.rows) % this.rows

                sum := sum + this.grid[col][row]
            }
        }

        sum := sum - this.grid[x][y]

        return sum
    }
}